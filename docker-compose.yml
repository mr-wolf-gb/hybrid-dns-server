version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: dns-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-hybrid_dns}
      POSTGRES_USER: ${DB_USER:-dns_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dns-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-dns_user} -d ${DB_NAME:-hybrid_dns}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # BIND9 DNS Server
  bind9:
    build:
      context: ./docker/bind9
      dockerfile: Dockerfile
    container_name: dns-bind9
    restart: unless-stopped
    ports:
      - "53:53/tcp"
      - "53:53/udp"
      - "953:953/tcp"  # BIND statistics
    volumes:
      - ./bind9:/etc/bind:ro
      - bind_cache:/var/cache/bind
      - bind_logs:/var/log/bind
    networks:
      - dns-network
    cap_add:
      - NET_BIND_SERVICE
    healthcheck:
      test: ["CMD", "dig", "@localhost", "health.check", "+short"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: dns-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-dns_user}:${DB_PASSWORD:-changeme123}@postgres:5432/${DB_NAME:-hybrid_dns}
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-this}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-your-jwt-secret-change-this}
      BIND_CONFIG_DIR: /etc/bind
      BIND_ZONES_DIR: /etc/bind/zones
      BIND_RPZ_DIR: /etc/bind/rpz
      DEBUG: ${DEBUG:-false}
    volumes:
      - ./bind9:/etc/bind
      - bind_logs:/var/log/bind:ro
    networks:
      - dns-network
    depends_on:
      postgres:
        condition: service_healthy
      bind9:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend with Nginx
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    container_name: dns-frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/ssl/certs:ro
    networks:
      - dns-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service
  monitor:
    build:
      context: ./backend
      dockerfile: Dockerfile.monitor
    container_name: dns-monitor
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://${DB_USER:-dns_user}:${DB_PASSWORD:-changeme123}@postgres:5432/${DB_NAME:-hybrid_dns}
      BIND_CONFIG_DIR: /etc/bind
      MONITORING_INTERVAL: ${MONITORING_INTERVAL:-60}
      HEALTH_CHECK_INTERVAL: ${HEALTH_CHECK_INTERVAL:-300}
    volumes:
      - ./bind9:/etc/bind:ro
      - bind_logs:/var/log/bind:ro
    networks:
      - dns-network
    depends_on:
      postgres:
        condition: service_healthy
      bind9:
        condition: service_healthy

  # Redis Cache (optional, for session storage and caching)
  redis:
    image: redis:7-alpine
    container_name: dns-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme123}
    volumes:
      - redis_data:/data
    networks:
      - dns-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
    driver: local
  bind_cache:
    driver: local
  bind_logs:
    driver: local
  redis_data:
    driver: local

networks:
  dns-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16